# -*- coding: utf-8 -*-
"""TemplateDijkstra.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ckpOqKuLX_AzatF90Guy3ImLkewFP1kr
"""

import random as r
import numpy as np
INFTY = 100000
MAX_VERTICES = 10
FALSE = 0
TRUE = 1
#c = np.zeros((MAX_VERTICES+1, MAX_VERTICES+1))  #Cost matrix
T=[0]*10            #A set of nodes already in the tree
prev = [0]*10       #Previous node to source
d=[0]*10            #Distance to source

def main():
  n = int(input("Enter the number of vertices (2 to 10):"))   #Number of vertices
  c = np.zeros((n,n),int)             #Cost matrix

  if n < 2 or n > MAX_VERTICES:
    exit()
  print("Generate a cost matrix of an unidirected random graph .. ")
  #random input number
  for i in range(n):
      for j in range(i,n):
          u = r.randint(1,10)/10
          if i==j :
              c[i][j] = 0
          elif u < 0.4:
              c[i][j] = 1+r.randint(1,10)%10   #random cost between 1 to 10
              c[j][i] = c[i][j]
          else:
              c[i][j] = 1
              c[j][i] = -1
  print(c)
  dijkstra(c,n)

def dijkstra(c,n):
  while(1):
    print("Enter the source node(1 to",n,"):")
    s = int(input())        #Source node
    if s < 1 or s > n :
      print("Out of range ",n," BYE")
      break
    #Step 1. Initialization
    for i in range(1,n):
      T[i] = FALSE
      if i == s:
        d[i] = 0
      else:
        d[i] = INFTY
    
    prev[s] = s 
    m = 0       #Number of vertices already in the tree
    while(1):
        mincost = INFTY
        u = FALSE
        #Step 2. Find node u with smallest distance to the source and add it to the tree
        for i in range(1,n):
            ##code here
        
        T[u] = TRUE
        m+=1

        #Add nodes have been added to the tree
        if m == n :
            break
        #Step 3 . Update labels of all nodes connected to u 
        
        for v in range(1,n):
            ##code here

        #print(d)
        #print(prev)
        
    #Print out the result
    print("Shortest path from ",s," to every node .. \n")
    
    for i in range(1,n+1):
        ##code here

main()